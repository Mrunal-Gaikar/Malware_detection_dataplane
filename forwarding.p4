/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

const bit<16> TYPE_IPV4 = 0x800;

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

typedef bit<9>  egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;
#define TCP_FLAG_URG 0x20
#define TCP_FLAG_ACK 0x10
#define TCP_FLAG_PSH 0x08
#define TCP_FLAG_RST 0x04
#define TCP_FLAG_SYN 0x02
#define TCP_FLAG_FIN 0x01
#define TCP_FLAG_PA 0x18
#define TCP_FLAG_SA 0x12
#define FALSE 0
#define TRUE 1
#define VALID 0x1

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
}

header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    tos;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}
// tcp header
header tcp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4>  dataOffset;
    bit<4>  res;
    bit<8>  flags;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}

header cpu_t {
   bit<16> device_id;
   bit<16> reason;
   bit<80> counter;
}

struct metadata {
    /* empty */
 bit<48>     eth_sa;
    bit<48>    eth_da;
    bit<32>    ipv4_sa;
    bit<32>    ipv4_da;
    bit<16>    tcp_sp;
    bit<16>    tcp_dp;
    bit<16>    tcp_length;
    bit<32>    tcp_ack_no;
    bit<32>    tcp_seq_no; 
    bit<1>      to_drop;

    // forward information

    bit<32>     nhop_ipv4; // ipv4 next hop
}

struct headers {
    ethernet_t   ethernet;
    ipv4_t       ipv4;
    cpu_t        cpu;
    tcp_t      tcp;
}

/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {

        packet.extract(hdr.ethernet);
         meta.eth_da=hdr.ethernet.dstAddr;
        meta.eth_sa=hdr.ethernet.srcAddr;
       

        transition select(hdr.ethernet.etherType){

            TYPE_IPV4: ipv4;
            default: accept;
        }

    }

    state ipv4 {
        packet.extract(hdr.ipv4);
	meta.ipv4_sa=hdr.ipv4.srcAddr;
        meta.ipv4_da=hdr.ipv4.dstAddr;
        meta.tcp_length=hdr.ipv4.totalLen - 20;
        transition select(hdr.ipv4.protocol) {
            6: parse_tcp;
            default: accept;
                }
       
    }
state parse_tcp {
    packet.extract(hdr.tcp);
   meta.tcp_sp=hdr.tcp.srcPort;
        meta.tcp_dp=hdr.tcp.dstPort;
        meta.tcp_seq_no=hdr.tcp.seqNo;
        meta.tcp_ack_no=hdr.tcp.ackNo;
        meta.to_drop=TRUE;
        transition accept; 

   
}

}


/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply {  }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    action drop() {
        mark_to_drop(standard_metadata);
    }

    action ipv4_forward(macAddr_t dstAddr, egressSpec_t port) {

        // Set the src mac address as the previous dst, this is not correct right?
        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;

        // Set the destination mac address that we got from the match in the table.
        hdr.ethernet.dstAddr = dstAddr;

        // Set the output port that we also get from the table.
        standard_metadata.egress_spec = port;

        //decrease ttl by 1
        hdr.ipv4.ttl = hdr.ipv4.ttl -1;

    }

    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        actions = {
            ipv4_forward;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = NoAction();
    }

    apply {

        // Only if IPV4 the rule is applied. Therefore other packets will not be forwarded.
        if (hdr.ipv4.isValid()){
           if(hdr.tcp.isValid())
{ 
if((hdr.ipv4.totalLen <=65 && ((hdr.tcp.flags & TCP_FLAG_SA == TCP_FLAG_SA )||(hdr.tcp.flags & TCP_FLAG_SYN == TCP_FLAG_SYN ))) ||
(hdr.ipv4.totalLen >=65 && hdr.ipv4.totalLen <=477 && (hdr.tcp.flags & TCP_FLAG_PA == TCP_FLAG_PA )) )

           

		{
		// drop packets
		
                } 

else
{
ipv4_lpm.apply();
}
	
	}
        }
    }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {


    register<bit<80>>(1) cpu_counter;

    apply {
        // Non-cloned packets have an instance_type of 0, so then we clone them
        // using the mirror ID = 100. That, in combination with the control plane, will
        // select to which port the packet has to be cloned to.
        if (standard_metadata.instance_type == 0 ){
            clone(CloneType.E2E,100);
        }
        else if (standard_metadata.instance_type != 0){
            hdr.cpu.setValid();
            hdr.cpu.device_id = 1;
            hdr.cpu.reason = 200;
            cpu_counter.read(hdr.cpu.counter, (bit<32>)0);
            hdr.cpu.counter = hdr.cpu.counter + 1;
            cpu_counter.write((bit<32>)0, hdr.cpu.counter);

             
            // Disable other headers
            hdr.ethernet.setInvalid();
            hdr.ipv4.setInvalid();
        }
    }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
	update_checksum(
	    hdr.ipv4.isValid(),
            { hdr.ipv4.version,
	      hdr.ipv4.ihl,
              hdr.ipv4.tos,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
	    HashAlgorithm.csum16);
update_checksum(
hdr.tcp.isValid(),
{
hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr,
                  8w0,
                  meta.tcp_length,
                  hdr.ipv4.protocol,
hdr.tcp.srcPort,
    hdr.tcp.dstPort,
    hdr.tcp.seqNo,
    hdr.tcp.ackNo,
   hdr.tcp.dataOffset,
    hdr.tcp.res,
    hdr.tcp.flags,

    hdr.tcp.window,
   
    hdr.tcp.urgentPtr }, 
hdr.tcp.checksum,
           
     HashAlgorithm.csum16);
}

}
/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply {

        //parsed headers have to be added again into the packet.
        packet.emit(hdr.cpu);
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv4);
       packet.emit(hdr.tcp);
     

    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

//switch architecture
V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;
